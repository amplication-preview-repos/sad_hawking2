/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PolicyholderService } from "../policyholder.service";
import { PolicyholderCreateInput } from "./PolicyholderCreateInput";
import { Policyholder } from "./Policyholder";
import { PolicyholderFindManyArgs } from "./PolicyholderFindManyArgs";
import { PolicyholderWhereUniqueInput } from "./PolicyholderWhereUniqueInput";
import { PolicyholderUpdateInput } from "./PolicyholderUpdateInput";
import { PolicyFindManyArgs } from "../../policy/base/PolicyFindManyArgs";
import { Policy } from "../../policy/base/Policy";
import { PolicyWhereUniqueInput } from "../../policy/base/PolicyWhereUniqueInput";

export class PolicyholderControllerBase {
  constructor(protected readonly service: PolicyholderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Policyholder })
  async createPolicyholder(
    @common.Body() data: PolicyholderCreateInput
  ): Promise<Policyholder> {
    return await this.service.createPolicyholder({
      data: data,
      select: {
        contactInfo: true,
        createdAt: true,
        dob: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Policyholder] })
  @ApiNestedQuery(PolicyholderFindManyArgs)
  async policyholders(@common.Req() request: Request): Promise<Policyholder[]> {
    const args = plainToClass(PolicyholderFindManyArgs, request.query);
    return this.service.policyholders({
      ...args,
      select: {
        contactInfo: true,
        createdAt: true,
        dob: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Policyholder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async policyholder(
    @common.Param() params: PolicyholderWhereUniqueInput
  ): Promise<Policyholder | null> {
    const result = await this.service.policyholder({
      where: params,
      select: {
        contactInfo: true,
        createdAt: true,
        dob: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Policyholder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePolicyholder(
    @common.Param() params: PolicyholderWhereUniqueInput,
    @common.Body() data: PolicyholderUpdateInput
  ): Promise<Policyholder | null> {
    try {
      return await this.service.updatePolicyholder({
        where: params,
        data: data,
        select: {
          contactInfo: true,
          createdAt: true,
          dob: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Policyholder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePolicyholder(
    @common.Param() params: PolicyholderWhereUniqueInput
  ): Promise<Policyholder | null> {
    try {
      return await this.service.deletePolicyholder({
        where: params,
        select: {
          contactInfo: true,
          createdAt: true,
          dob: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/policies")
  @ApiNestedQuery(PolicyFindManyArgs)
  async findPolicies(
    @common.Req() request: Request,
    @common.Param() params: PolicyholderWhereUniqueInput
  ): Promise<Policy[]> {
    const query = plainToClass(PolicyFindManyArgs, request.query);
    const results = await this.service.findPolicies(params.id, {
      ...query,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        policyNumber: true,

        policyholder: {
          select: {
            id: true,
          },
        },

        premiumAmount: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/policies")
  async connectPolicies(
    @common.Param() params: PolicyholderWhereUniqueInput,
    @common.Body() body: PolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      policies: {
        connect: body,
      },
    };
    await this.service.updatePolicyholder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/policies")
  async updatePolicies(
    @common.Param() params: PolicyholderWhereUniqueInput,
    @common.Body() body: PolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      policies: {
        set: body,
      },
    };
    await this.service.updatePolicyholder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/policies")
  async disconnectPolicies(
    @common.Param() params: PolicyholderWhereUniqueInput,
    @common.Body() body: PolicyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      policies: {
        disconnect: body,
      },
    };
    await this.service.updatePolicyholder({
      where: params,
      data,
      select: { id: true },
    });
  }
}
