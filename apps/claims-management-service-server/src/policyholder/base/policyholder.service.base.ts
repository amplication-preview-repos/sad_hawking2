/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Policyholder as PrismaPolicyholder,
  Policy as PrismaPolicy,
} from "@prisma/client";

export class PolicyholderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PolicyholderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.policyholder.count(args);
  }

  async policyholders(
    args: Prisma.PolicyholderFindManyArgs
  ): Promise<PrismaPolicyholder[]> {
    return this.prisma.policyholder.findMany(args);
  }
  async policyholder(
    args: Prisma.PolicyholderFindUniqueArgs
  ): Promise<PrismaPolicyholder | null> {
    return this.prisma.policyholder.findUnique(args);
  }
  async createPolicyholder(
    args: Prisma.PolicyholderCreateArgs
  ): Promise<PrismaPolicyholder> {
    return this.prisma.policyholder.create(args);
  }
  async updatePolicyholder(
    args: Prisma.PolicyholderUpdateArgs
  ): Promise<PrismaPolicyholder> {
    return this.prisma.policyholder.update(args);
  }
  async deletePolicyholder(
    args: Prisma.PolicyholderDeleteArgs
  ): Promise<PrismaPolicyholder> {
    return this.prisma.policyholder.delete(args);
  }

  async findPolicies(
    parentId: string,
    args: Prisma.PolicyFindManyArgs
  ): Promise<PrismaPolicy[]> {
    return this.prisma.policyholder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .policies(args);
  }
}
