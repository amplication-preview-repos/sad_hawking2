/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Policyholder } from "./Policyholder";
import { PolicyholderCountArgs } from "./PolicyholderCountArgs";
import { PolicyholderFindManyArgs } from "./PolicyholderFindManyArgs";
import { PolicyholderFindUniqueArgs } from "./PolicyholderFindUniqueArgs";
import { CreatePolicyholderArgs } from "./CreatePolicyholderArgs";
import { UpdatePolicyholderArgs } from "./UpdatePolicyholderArgs";
import { DeletePolicyholderArgs } from "./DeletePolicyholderArgs";
import { PolicyFindManyArgs } from "../../policy/base/PolicyFindManyArgs";
import { Policy } from "../../policy/base/Policy";
import { PolicyholderService } from "../policyholder.service";
@graphql.Resolver(() => Policyholder)
export class PolicyholderResolverBase {
  constructor(protected readonly service: PolicyholderService) {}

  async _policyholdersMeta(
    @graphql.Args() args: PolicyholderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Policyholder])
  async policyholders(
    @graphql.Args() args: PolicyholderFindManyArgs
  ): Promise<Policyholder[]> {
    return this.service.policyholders(args);
  }

  @graphql.Query(() => Policyholder, { nullable: true })
  async policyholder(
    @graphql.Args() args: PolicyholderFindUniqueArgs
  ): Promise<Policyholder | null> {
    const result = await this.service.policyholder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Policyholder)
  async createPolicyholder(
    @graphql.Args() args: CreatePolicyholderArgs
  ): Promise<Policyholder> {
    return await this.service.createPolicyholder({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Policyholder)
  async updatePolicyholder(
    @graphql.Args() args: UpdatePolicyholderArgs
  ): Promise<Policyholder | null> {
    try {
      return await this.service.updatePolicyholder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Policyholder)
  async deletePolicyholder(
    @graphql.Args() args: DeletePolicyholderArgs
  ): Promise<Policyholder | null> {
    try {
      return await this.service.deletePolicyholder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Policy], { name: "policies" })
  async findPolicies(
    @graphql.Parent() parent: Policyholder,
    @graphql.Args() args: PolicyFindManyArgs
  ): Promise<Policy[]> {
    const results = await this.service.findPolicies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
